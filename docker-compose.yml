version: '3'
services:
  api:
    build:
      dockerfile: Dockerfile
      context: ./staging
    depends_on:
      - "db"
    environment:
      SCOUT_API_USER: ${SCOUT_API_USER}
      SCOUT_API_PASSWORD: ${SCOUT_API_PASSWORD}
      SCOUT_LOGIN_URL: ${SCOUT_LOGIN_URL}
      SCOUT_QUERY_URL: ${SCOUT_QUERY_URL}
      SCOUT_STAGE_URL: ${SCOUT_STAGE_URL}
      RESULT_USERNAME: ${RESULT_USERNAME}
      RESULT_PASSWORD: ${RESULT_PASSWORD}
      DBUSER: ${DBUSER}
      DBPASSWORD: ${DBPASSWORD}
      DBHOST: ${DBHOST}
      DBNAME: ${DBNAME}
    volumes:
      - ./staging:/usr/src/app
  db:
    build:
      dockerfile: Dockerfile
      context: ./postgres
    restart: always
    environment:
      POSTGRES_USER: ${DBUSER}
      POSTGRES_PASSWORD: ${DBPASSWORD}
      POSTGRES_DB: ${DBNAME}
    volumes:
      - pgdata:/var/lib/postgresql/data
  pgadmin:
    image: dpage/pgadmin4
    restart: always
    depends_on:
      - "db"
    environment:
      PGADMIN_DEFAULT_EMAIL: test@test.com
      PGADMIN_DEFAULT_PASSWORD: root
    volumes:
      - pgadmin:/var/lib/pgadmin
  nginx:
    build:
      dockerfile: Dockerfile.dev
      context: ./nginx
    ports:
      - '8000:8000'
      - '5050:5050'
      - '9092:9092'
    depends_on:
      - "api"
  zookeeper:
    image: zookeeper:3.7.0
    ports:
     - "2181:2181"
  kafka:
    image: wurstmeister/kafka
    expose:
      - '9093'
    depends_on:
      - "zookeeper"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    volumes:
     - /var/run/docker.sock:/var/run/docker.sock
    healthcheck:
      test: ["CMD", "nc", "-vz", "localhost", "9092"]
      interval: 30s
      timeout: 10s
      retries: 4
  kafkad:
    build:
      dockerfile: Dockerfile
      context: ./staging
    command: pipenv run python kafkad.py
    restart: on-failure
    depends_on: 
      kafka:
        condition: service_healthy
    environment:
      MWA_TOPIC: mwa
      KAFKA_SERVER: kafka:9092
      RESULT_USERNAME: ${RESULT_USERNAME}
      RESULT_PASSWORD: ${RESULT_PASSWORD}
      SCOUT_API_USER: ${SCOUT_API_USER}
      SCOUT_API_PASSWORD: ${SCOUT_API_PASSWORD}
      SCOUT_LOGIN_URL: ${SCOUT_LOGIN_URL}
      SCOUT_QUERY_URL: ${SCOUT_QUERY_URL}
      SCOUT_STAGE_URL: ${SCOUT_STAGE_URL}
      DBUSER: ${DBUSER}
      DBPASSWORD: ${DBPASSWORD}
      DBHOST: ${DBHOST}
      DBNAME: ${DBNAME}
    volumes:
      - ./staging:/usr/src/app
  haproxy:
    build:
      dockerfile: Dockerfile.dev
      context: ./haproxy
    restart: always
    ports:
      - '8080:8080'
    secrets:
      - pawsey-cacert.crt
volumes:
  pgdata:
  pgadmin:
secrets:
  pawsey-cacert.crt:
    file: ./certs/pawsey-cacert.crt