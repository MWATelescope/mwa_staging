version: '2.1'
services:
  api:
    build:
      dockerfile: Dockerfile
      context: ./staging
    depends_on:
      db:
        condition: service_healthy
    environment:
      SCOUT_API_USER: ${SCOUT_API_USER}
      SCOUT_API_PASSWORD: ${SCOUT_API_PASSWORD}
      SCOUT_LOGIN_URL: ${SCOUT_LOGIN_URL}
      SCOUT_QUERY_URL: ${SCOUT_QUERY_URL}
      SCOUT_STAGE_URL: ${SCOUT_STAGE_URL}
      RESULT_USERNAME: ${RESULT_USERNAME}
      RESULT_PASSWORD: ${RESULT_PASSWORD}
      DBUSER: ${DBUSER}
      DBPASSWORD: ${DBPASSWORD}
      DBHOST: ${DBHOST}
      DBNAME: ${DBNAME}
    volumes:
      - ./staging:/usr/src/app
  db:
    build:
      dockerfile: Dockerfile
      context: ./postgres
    restart: always
    environment:
      POSTGRES_USER: ${DBUSER}
      POSTGRES_PASSWORD: ${DBPASSWORD}
      POSTGRES_DB: ${DBNAME}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - pgdata:/var/lib/postgresql/data
  nginx:
    build:
      dockerfile: Dockerfile
      context: ./nginx
    ports:
      - '443:443'
      - '80:80'
    depends_on:
      - "api"
    volumes:
      - ./config:/etc/nginx/certs
  kafkad:
    build:
      dockerfile: Dockerfile
      context: ./staging
    depends_on:
      db:
        condition: service_healthy
    command: pipenv run python kafkad.py
    environment:
      MWA_TOPIC: mwa
      KAFKA_SERVER: kafka:9092
      RESULT_USERNAME: ${RESULT_USERNAME}
      RESULT_PASSWORD: ${RESULT_PASSWORD}
      SCOUT_API_USER: ${SCOUT_API_USER}
      SCOUT_API_PASSWORD: ${SCOUT_API_PASSWORD}
      SCOUT_LOGIN_URL: ${SCOUT_LOGIN_URL}
      SCOUT_QUERY_URL: ${SCOUT_QUERY_URL}
      SCOUT_STAGE_URL: ${SCOUT_STAGE_URL}
      DBUSER: ${DBUSER}
      DBPASSWORD: ${DBPASSWORD}
      DBHOST: ${DBHOST}
      DBNAME: ${DBNAME}
  haproxy:
    build:
      dockerfile: Dockerfile.dev
      context: ./haproxy
    restart: always
    ports:
      - '8081:8081'
    volumes:
      - ./config:/etc/pawsey-tls/latest/haproxy/
volumes:
  pgdata: