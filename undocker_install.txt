
Dev instance running on 146.118.69.232

============================================================================================================
OS install and configuration:

-Install vanilla Ubuntu 24.04 LTS

apt install direnv haproxy postgresql python3-pip python-is-python3 python3.12-venv nginx

-Create the 'staging' user that will be running FastAPI and kafkad.py (sudo adduser --disabled-password staging)

============================================================================================================
Haproxy setup:

-Make /etc/haproxy.cfg look like this:
---------
global
        log /dev/log    local0
        log /dev/log    local1 notice
        chroot /var/lib/haproxy
        stats socket /run/haproxy/admin.sock mode 660 level admin
        stats timeout 30s
        user haproxy
        group haproxy
        daemon

        # Default SSL material locations
        ca-base /etc/ssl/certs
        crt-base /etc/ssl/private

        # See: https://ssl-config.mozilla.org/#server=haproxy&server-version=2.0.3&config=intermediate
        ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
        ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
        ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets

defaults
        log     global
        option  httplog
        option  dontlognull
        retries 3
        option  redispatch
        timeout client 30s
        timeout connect 4s
        timeout server 30s
        mode tcp
        errorfile 400 /etc/haproxy/errors/400.http
        errorfile 403 /etc/haproxy/errors/403.http
        errorfile 408 /etc/haproxy/errors/408.http
        errorfile 500 /etc/haproxy/errors/500.http
        errorfile 502 /etc/haproxy/errors/502.http
        errorfile 503 /etc/haproxy/errors/503.http
        errorfile 504 /etc/haproxy/errors/504.http

# Proxy frontend
frontend API_Proxy
    bind localhost:8080
    default_backend proxy_backend

#########################################
# Define proxy backend
#########################################
backend proxy_backend
    balance source
    server vss-1 146.118.74.144:8080
    server vss-2 146.118.74.145:8080
    server vss-3 146.118.74.146:8080
    server vss-4 146.118.74.147:8080
    server vss-5 146.118.74.148:8080
    server vss-6 146.118.74.149:8080
-----------
systemctl restart haproxy

============================================================================================================
nginx setup:

-Create /etc/nginx/certs and copy in mwatelescope.org.crt, mwatelescope.org.key and pawsey.crt

rm /etc/nginx/sites-enabled/default

-Create /etc/nginx/conf.d/default.conf containing:
 -----------------
 upstream api {
    server localhost:8000;
}

server {
    listen 443 ssl;
    server_name staging.mwatelescope.org;
    ssl_certificate /etc/nginx/certs/mwatelescope_org.crt;
    ssl_certificate_key /etc/nginx/certs/mwatelescope_org.key;
    client_max_body_size 100M;

    location / {
        proxy_pass http://api;
    }
}

server {
  listen 80 default_server;
  server_name _;
  client_max_body_size 100M;

  return 301 https://$host$request_uri;
}
------------

systemctl restart nginx

============================================================================================================
Postgres setup:

-Default config files in /etc/postgres can be left unchanges (listening only on 127.0.0.1)

sudo su postgres
psql
postgres-# CREATE USER staging WITH ENCRYPTED PASSWORD '<insert_secret_here>';
postgres=# CREATE DATABASE staging;
postgres=# GRANT ALL PRIVILEGES ON DATABASE staging TO staging;

-Then:
psql -d staging
postgres=# GRANT ALL ON SCHEMA public TO staging

-Then 'su' to the staging user and run:
psql -d staging
and paste in the contents of tabledefs.sql to define the initial tables and indexes.

============================================================================================================

As the staging user:
-------------------
-Run ssh-keygen to create an SSH key
-Copy the SSH key to github 'mwa-site' user
-Install this line at the end of ~/.bashrc:
--------
eval "$(direnv hook bash)"
--------
-Log out and back in again (or otherwise force the new .bashrc to be loaded)

git clone git@github.com:MWATelescope/mwa_staging.git

-Create  mwa_staging/.envrc and add all the environment variables

cd mwa_staging
direnv allow     # You should see a message about all the environment variables being set

python -m venv staging_env
source staging_env/bin/activate

pip install orjson
pip install "psycopg[binary]"
pip install psycopg_pool
pip install "fastapi[all]"
pip install kafka-python
pip install requests

============================================================================================================
Running the code for testing, as the staging user:

cd mwa_staging
source staging_env/bin/activate
cd staging

uvicorn staged:app --reload --host 127.0.0.1   # doesn't exit

-or

python kafkad.py   # doesn't exit

============================================================================================================