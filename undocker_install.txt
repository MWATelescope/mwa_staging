
Dev instance running on 146.118.69.232

============================================================================================================
OS install and configuration:

-Install vanilla Ubuntu 24.04 LTS

apt install direnv haproxy postgresql python3-pip python-is-python3 python3.12-venv nginx

-Create the 'staging' user that will be running FastAPI and kafkad.py (sudo adduser --disabled-password staging)

============================================================================================================
Haproxy setup:

HAProxy is set to listen on http://localhost:8080, and redistribute any calls to that address to one of the
six Scout API servers on 146.118.74.144-149 on port 8080.

cp config_file_examples/haproxy.cfg /etc/haproxy.cfg

-Check haproxy config

systemctl restart haproxy

============================================================================================================
nginx setup:

Nginx is set to listen to port 443 on the external IP, and redirect any calls to the uvicorn process
running the FastAPI daemon that's listening on localhost:8000

-Create /etc/nginx/certs and copy in mwatelescope.org.crt, mwatelescope.org.key and pawsey.crt

rm /etc/nginx/sites-enabled/default

-cp config_file_examples/nginx.conf.example /etc/nginx/conf.d/default.conf

systemctl restart nginx

============================================================================================================
Postgres setup:

-Default config files in /etc/postgres can be left unchanged (listening only on 127.0.0.1)

sudo su postgres
psql
postgres-# CREATE USER staging WITH ENCRYPTED PASSWORD '<insert_secret_here>';
postgres=# CREATE DATABASE staging;
postgres=# GRANT ALL PRIVILEGES ON DATABASE staging TO staging;

-Then:
psql -d staging
postgres=# GRANT ALL ON SCHEMA public TO staging

-Then 'su' to the staging user and run:
psql -d staging
and paste in the contents of config_file_examples/tabledefs.sql to define the initial tables and indexes.

============================================================================================================

As the staging user:
-------------------
-Run ssh-keygen to create an SSH key
-Copy the SSH key to github 'mwa-site' user
-Install this line at the end of ~/.bashrc:
--------
eval "$(direnv hook bash)"
--------
-Log out and back in again (or otherwise force the new .bashrc to be loaded)

git clone git@github.com:MWATelescope/mwa_staging.git

-Create  mwa_staging/.envrc and add all the environment variables

cd mwa_staging
direnv allow     # You should see a message about all the environment variables being set

python -m venv staging_env
source staging_env/bin/activate

pip install orjson
pip install "psycopg[binary]"
pip install psycopg_pool
pip install "fastapi[all]"
pip install kafka-python
pip install requests

============================================================================================================
Running the code for testing, as the staging user:

cd mwa_staging
source staging_env/bin/activate
cd staging

uvicorn staged:app --reload --host 127.0.0.1   # doesn't exit

-and

python kafkad.py   # doesn't exit

============================================================================================================
Full installation with systemd - as root:

cp config_file_examples/kafkad.service.example /etc/systemd/system/kafkad.service
cp config_file_examples/staged.service.example /etc/systemd/system/staged.service

systemctl daemon-reload
systemctl enable kafkad.service staged.service
systemctl start kafkad.service staged.service
